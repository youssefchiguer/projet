-R0 : Calculer PageRank et le Poids d’un réseau donné

-R1 : Comment calculer le poids et le PageRank d’un réseau donné ? 

   No_Argument_Error  :  Exception  ; 
    alpha : in Flottant ;                                   --La valeur de alpha 
    kmax : in Integer ;                                     --Le nombre d'itération max
    n :  in Integer ;                                       --Le nombre de pages web à classer 
  
  -Lire et récupérer les données à partir du réseau
  -Construire la matrice de Google G 
  -Calculer le poids des nœuds du réseau 
  -Récupérer l’identifiant des nœuds par ordre décroissant du poids
  -Attribuer les valeurs aux paramètres de la ligne de commande


-R2 : Comment lire et récupérer les données à partir du réseau ?

   - Compter le nombre de lignes du réseau en ne tenant pas compte de la première ligne                s : out Integer
   - Stocker les valeurs du réseau dans une matrice de s lignes et deux colonnes                       L : out T_Mat

-R2 : Comment construire la matrice de Google G ? 

   - Remplir la matrice H                                                                    H : out T_Google
   - Construire la matrice S à partir de H                                                   S : out T_Google
   - Construire une matrice qui ne contient que les 1                                        E : out T_Google     
    G  <-  alpha*S + ((1-alpha)/N)*E ;       -- Définir le produit d’une constant avec une matrice ? 

-R2 : Comment Calculer le poids des nœuds du réseau ? 
   
   - Calculer le poids non trié du réseau             A : Out T_Ligne      --Le type T_Ligne est un tableau de taille N, voire une matrice ligne de N éléments
   - Trier la matrice ligne A                                              --trier une matrice ligne A de type T_Ligne de manière décroissante
   - Stocker les valeurs de A dans un fichier Poids.p 

-R2 : Comment récupérer l’identifiant des nœuds par ordre décroissant du poids ? 

A  <-  Le Poids non trié du réseau  ;                     A : Out T_Ligne
L  <-  Le poids trié du réseau  ;                         L : Out T_Ligne 
Pour i de 0 à N-1 Faire
        Pour j de 0 à N-1 Faire
            Si  A(j) = L(i) Alors
                Stocker j dans un fichier PageRank.ord ;                   --On doit faire l'opération dans cette boucle                                
           Fin Si ; 
      Fin Pour ;
  Fin Pour ;

R2 : Comment attribuer les valeurs aux paramètres de la ligne de commande ? 

------------------------------------------------------------------------------------------------------------------

    
R3 : Comment Compter le nombre de lignes du réseau en ne tenant pas compte de la première ?                                         
s  <- 0 ;
open(File, In_File, Argument(Argument_Count)) ;         -- File est le fichier.net qui représente le réseau 
 Get(File, n) ;                                         --Stocker la valeur du premier entier du fichier File dans l’entier n 
  Tant que non End_Of_File(File)  Faire
            Get(File, a) ;   
            s  <-  s+1 ;
 Fin Tant que  ;
  Retourner  s/2;

R3 : Comment Stocker les valeurs du réseau dans une matrice de s lignes et deux colonnes ?    

Si  Argument_Count >= 1  Alors             -- Argument_Count compte le nombre de paramètres de la ligne de commande
    begin
       open(File, In_File, Argument(Argument_Count)) ;
       Get(File, n) ;                              -- Stocker la première valeur du fichier File dans l’entier n
       i  <-  1 ;
       Tant que  i <= Max and not End_Of_File(File) loop     -- Max est le nombre de lignes du fichier file en ne tenant pas compte de la première ligne
            Get(File, L(i,1)) ;                              --Stocker les valeurs de gauche dans L(i,1) 
            Get(File, L(i,2)) ;                              --Stocker les valeurs de droite dans L(I,2)
            i  <-  i+1 ;
       Fin Tant que  ;
       close(File);
    end;
Sinon
    LEVER No_Argument_Error;
Fin Si ; 
Retourner  L ;                 



R3 : Comment remplir la matrice H ?

-Initialiser H                                                                               H : Out T_Google 
-Calculer le nombre d’hyperliens pour chaque nœud et le stocker dans une matrice ligne M
  Pour i de 1 à Max Faire                                                                    --Max est le nombre de lignes-1 du réseau 
            H(L(i,1),L(i,2))  <-  M(L(i,1)) ;
 Fin Pour;

R3 :   Comment construire la matrice S à partir de H ?

S  <- H ;
        Pour i de 0 à N-1 Faire
            j  <- 0 ;
            Tant Que  j <= N-1 et S(i,j) = 0 Faire
                  j  <- j+1 ;
            Fin Tant Que  ;
            Si  j = N Alors
                 Pour  k  de 0 à N-1 Faire
                     S(i,k)  <- 1/N ;
                Fin Pour ;
           Fin Si ;
       Fin Pour  ;

R3 : Comment construire une matrice qui ne contient que les 1 ?                                                                                                        

Pour i de 0 à N-1 Faire 
     Pour j de 0 à N-1 Faire 
          G(i,j) <- 1.0 ;                                                            G : Out T_Google  
         --On affecte 1.0 à L car T_Google a des valeurs de types T_Double
    Fin Pour ; 
Fin Pour ;


R3 : Comment calculer le poids non trié ?

        G  <-  Google_naive(File) ;
       -remplir L avec les valeurs 1/N  ;                                                         L : Out T_Ligne
       Pour  k de  1 à kmax Faire
          L <-  produit(L,G);                               --Le produit d'une matrice ligne L avec une matrice G 
       Fin Pour  ;
       Retourner L ;

R3 : Comment trier une matrice ligne ? 

        Pour  i  de  0 à  N-2 Faire
            Indice_Max  <- i ;                                                        Indice_Max : Integer ; 
            Max  <-  L (Indice_Max);                                           Max : T_Double ;          L : Out T_Ligne ;
            Pour I de i+1 à N-1 Faire
                Si L (I) > Max Alors
                    Indice_Max  <-  I ;
                    Max <- L (Indice_Max);
                Fin Si ;
            Fin Pour ;
            -- Echanger les éléments aux indices Indice_Max et i 
           L (Indice_Max)  <-  L (i) ;
           L (i)  <-  Max ;
     Fin Pour ;

R3 : Comment stocker les valeurs d'une matrice ligne A dans un fichier Poids.p ? 

------------------------------------------------------------------------------- (créer un fichier et écrire dedans ...) 


R4 : Comment initialiser une matrice ligne ? 

Pour i de 0 à N-1 Faire 
          L(i) <- 0.0 ;                                                                L : Out T_Ligne   
         --On affecte 0.0 à L car T_Ligne a des valeurs de types T_Double 
Fin Pour ;

R4 : Comment initialiser une matrice de Taille N*N ? 

Pour i de 0 à N-1 Faire 
     Pour j de 0 à N-1 Faire 
          G(i,j) <- 0.0 ;                                                            G : Out T_Google  
         --On affecte 0.0 à L car T_Google a des valeurs de types T_Double
    Fin Pour ; 
Fin Pour ;

R4 : Comment Calculer le nombre d'hyperliens pour chaque nœud et les stocker dans une matrice ligne ? 

L  <- Stocker(File) ;                                               -- Stocker est la fonction qui stocke les valeurs du réseau dans 
                                                                    -- une matrice à s lignes et 2 colonnes (vu précédemment au niveau R3) 
-Initialiser N                                                      N : Out T_Ligne  
Pour i de 0 à N-1 Faire
        s  <- 0 ;
        Pour  j de 1 à Max Faire
              Si L(j,1) = i Alors                        --and L(j,2) /= L(k,2) and L(k,1) = I ( on fait une autre boucle pour k ? )
                     s <- s+1 ;
              Fin Si ;
         Fin Pour  ;
         Si  s = 0 alors                                 
               N(i) <-  0.0 ;                              -- ou on fait T_Double(0)
        Sinon
               N(i) <-  1/s ;
         Fin Si ;
 Fin Pour ;
 Retourner N ; 


R4 : Comment remplir une matrice ligne avec les valeurs 1/N ? 


Pour i de 0 à N-1 Faire 
    L(i) <- 1/N ;                                        L : Out T_Ligne
Fin Pour ; 


R4 : Comment  faire le produit d’une matrice ligne avec une matrice carrée ?  

 -initialiser P                                           P : Out T_Ligne ;
 Pour j de 0 à N-1 Faire
      Pour i de 0 à N-1 Faire
           P(j) <-  P(j) + L(i)*G(i,j) ;                 L : in T_Ligne ;      G : in T_Google ;  
      Fin Pour ;
 Fin Pour ;
 Retourner P ;
 
 
